// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import com.ctre.phoenix6.configs.MotorOutputConfigs;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.hardware.TalonFX;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.Constants.elevatorConstants;


public class ElevatorSubsystem extends SubsystemBase {
  TalonFX elevatorMotor;
  private static int currentPosition;
  private static boolean isAtBottom;
  MotorOutputConfigs motorConfig;

  TalonFXConfiguration pidConfiguration = new TalonFXConfiguration().withSlot0(new Slot0Configs().withKP(elevatorConstants.kElevatorP).withKI(elevatorConstants.kElevatorI).withKD(elevatorConstants.kElevatorD).withKG(elevatorConstants.kElevatorG));


  public ElevatorSubsystem() {
    elevatorMotor = new TalonFX(elevatorConstants.elevatorPort);
    elevatorMotor.getConfigurator().apply(pidConfiguration);

    motorConfig = new MotorOutputConfigs();
    motorConfig.PeakForwardDutyCycle = elevatorConstants.maxElevatorSpeed;
    motorConfig.PeakReverseDutyCycle = elevatorConstants.maxReverseElevatorSpeed;

  }
 
  public void exampleMethod (double Placeholder){

  }


  public Command exampleMethodCommand() {

    return runOnce(
        () -> {

        });
  }

  /**
   * An example method querying a boolean state of the subsystem (for example, a digital sensor).
   *
   * @return value of some boolean subsystem state, such as a digital sensor.
   */
  public boolean exampleCondition() {
    // Query some boolean state, such as a digital sensor.
    return false;
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }
}
